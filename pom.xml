<?xml version="1.0" encoding="UTF-8"?>
<project
   xmlns="http://maven.apache.org/POM/4.0.0"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"
>
   <modelVersion>4.0.0</modelVersion>
   <name>DZ_SDOTXT Build Test</name>
   <groupId>dz_builder</groupId>
   <artifactId>sql-maven-plugin</artifactId>
   <version>1.0</version>
   <packaging>jar</packaging>
   <description>Automated testing of PLSQL</description>
   <properties>
      <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
   </properties>
   <pluginRepositories>
      <pluginRepository>
         <id>croche-releases</id>
         <url>http://croche.googlecode.com/svn/repository/releases</url>
      </pluginRepository>
   </pluginRepositories>
   <build>
      <!-- Maven follows a build convention based on phases which can be hard to follow.
           This example has goals which execute in the following order:
           A) initialize:
              1) Load project properties using properties-maven-plugin.
              2) Correct any file permissions issues related to checkout.
           B) generate-sources
              3) Run cleanup on scratch schema removing any preexisting module code. 
           C) process-sources
              4) Update test package header constants with TFS job and Jenkins build identifiers.
              5) Concatenate together module files into deployment script.
           D) process-resources
              6) Update the deployment script with module name to allow tests to run and tidy
                 any build and job id references. 
           E) compile
              7) Execute the deployment sql file in the test schema.
              8) Run shell script to generate Natural Docs PDF documentation.
      -->
      <plugins>
         <!-- Properties plugin to allow Maven to read parameters from a properties file.
              Used to stash away the Oracle database username, password and connection 
              parameters.    -->
         <plugin>
           <groupId>org.codehaus.mojo</groupId>
           <artifactId>properties-maven-plugin</artifactId>
           <version>1.0-alpha-2</version>
           <executions>
             <!-- Step A.1
                  Load project properties using properties-maven-plugin.
                  In this example Oracle credentials are retrieved from the file referenced below.
                  The format is simply parameter=value, e.g. dz.username=SCOTT     -->
             <execution>
               <phase>initialize</phase>
               <goals>
                 <goal>read-project-properties</goal>
               </goals>
               <configuration>
                 <files>
                   <file>/var/lib/jenkins/sqlplus.properties</file>
                 </files>
               </configuration>
             </execution>
           </executions>
         </plugin>
         <!-- Replacer plugin to swap in the build details into the test package
              specification file.     -->
         <plugin>
            <groupId>com.google.code.maven-replacer-plugin</groupId>
            <artifactId>replacer</artifactId>
            <version>1.5.2</version>
            <executions>
               <!-- Step C.4
                    Update the test package header with TFS job and Jenkins build identifiers.   -->
               <execution>
                  <id>foo1</id>
                  <phase>process-sources</phase>
                  <goals>
                     <goal>replace</goal>
                  </goals>                   
                  <configuration>
                     <file>tfs/Packages/DZ_SDOTXT_TEST.pks</file>
                     <replacements>
                        <replacement>
                           <token>C_TFS_CHANGESET CONSTANT NUMBER := 0.0;</token>
                           <value>C_TFS_CHANGESET CONSTANT NUMBER := ${TFS_CHANGESET};</value>
                        </replacement>
                        <replacement>
                           <token>C_JENKINS_JOBNM CONSTANT VARCHAR2\(255 Char\) := \'NULL\';</token>
                           <value>C_JENKINS_JOBNM CONSTANT VARCHAR2(255 Char) := '${JOB_NAME}';</value>
                        </replacement>
                        <replacement>
                           <token>C_JENKINS_BUILD CONSTANT NUMBER := 0.0;</token>
                           <value>C_JENKINS_BUILD CONSTANT NUMBER := ${BUILD_NUMBER};</value>
                        </replacement>
                        <replacement>
                           <token>C_JENKINS_BLDID CONSTANT VARCHAR2\(255 Char\) := \'NULL\';</token>
                           <value>C_JENKINS_BLDID CONSTANT VARCHAR2(255 Char) := '${BUILD_ID}';</value>
                        </replacement>                  
                     </replacements>
                  </configuration>  
               </execution>
               <!-- Step D.6
                    Update the deployment script with module name to allow tests to run and tidy
                    any build and job id references.   -->
               <execution>
                  <id>foo2</id>
                  <phase>process-resources</phase>
                  <goals>
                     <goal>replace</goal>
                  </goals>
                  <configuration>
                     <file>dz_sdotxt_deploy.sql</file>
                     <replacements>
                        <replacement>
                           <token>DZNAMEDZ</token>
                           <value>SDOTXT</value>
                        </replacement>
                        <replacement>
                           <token>DZBUILDIDDZ</token>
                           <value>${BUILD_ID}</value>
                        </replacement>
                        <replacement>
                           <token>DZTFSCHANGESETDZ</token>
                           <value>${TFS_CHANGESET}</value>
                        </replacement>
                     </replacements>
                  </configuration>
               </execution>
            </executions>
         </plugin>
         <!-- Merge file plugin used to concatenate PLSQL components together
              into the final deployment script.    -->
         <plugin>
            <groupId>croche.maven</groupId>
            <artifactId>maven-merge-file-plugin</artifactId>
            <version>0.4</version>
            <executions>
               <!-- Step C.5
                    Concatenate together module files into deployment script.   -->
               <execution>
                  <id>concatentate_deployment</id>
                  <phase>process-sources</phase>
                  <goals>
                     <goal>merge</goal>
                  </goals>
                  <configuration>
                     <merges>
                        <merge>
                           <!-- Note that merging uses the source files without any
                                alterations.  Mixing linefeeds styles and UTF8 BOM
                                markers may make running the concatenated file problematic
                                depending on the sensistivity of the SQL client.   -->
                           <targetFile>dz_sdotxt_deploy.sql</targetFile>
                           <sourceDirs>
                              <sourceDir>/var/lib/jenkins/userContent</sourceDir>
                              <sourceDir>tfs/Collections</sourceDir>
                              <sourceDir>tfs/Packages</sourceDir>
                              <sourceDir>tfs/Types</sourceDir>
                           </sourceDirs>
                           <nameContainsOrderings>
                              <nameContainsOrdering>sqlplus_header.sql</nameContainsOrdering>
                              <nameContainsOrdering>DZ_SDOTXT_LABELED.tps</nameContainsOrdering>
                              <nameContainsOrdering>DZ_SDOTXT_LABELED.tpb</nameContainsOrdering>
                              <nameContainsOrdering>DZ_SDOTXT_LABELED_LIST.tps</nameContainsOrdering>
                              <nameContainsOrdering>DZ_SDOTXT_UTIL.pks</nameContainsOrdering>
                              <nameContainsOrdering>DZ_SDOTXT_UTIL.pkb</nameContainsOrdering>
                              <nameContainsOrdering>DZ_SDOTXT_MAIN.pks</nameContainsOrdering>
                              <nameContainsOrdering>DZ_SDOTXT_MAIN.pkb</nameContainsOrdering>
                              <nameContainsOrdering>DZ_SDOTXT_TEST.pks</nameContainsOrdering>
                              <nameContainsOrdering>DZ_SDOTXT_TEST.pkb</nameContainsOrdering>
                              <nameContainsOrdering>sqlplus_footer.sql</nameContainsOrdering>
                           </nameContainsOrderings>
                           <includes>
                              <include>sqlplus_header.sql</include>
                              <include>DZ_SDOTXT_LABELED.tps</include>
                              <include>DZ_SDOTXT_LABELED.tpb</include>
                              <include>DZ_SDOTXT_LABELED_LIST.tps</include>
                              <include>DZ_SDOTXT_UTIL.pks</include>
                              <include>DZ_SDOTXT_UTIL.pkb</include>
                              <include>DZ_SDOTXT_MAIN.pks</include>
                              <include>DZ_SDOTXT_MAIN.pkb</include>
                              <include>DZ_SDOTXT_TEST.pks</include>
                              <include>DZ_SDOTXT_TEST.pkb</include>
                              <include>sqlplus_footer.sql</include>
                           </includes>
                           <!-- The maven merge plugin is oblivious to line feed issues.
                                If your source code is extracted with windows-style linefeeds
                                you will need to force the separator to use /r/n as
                                below.  Note that the separator string cannot start 
                                with an escaped /r -->
                           <separator>--&#xD;\n--*************************--&#xD;\nPROMPT #{file.name};&#xD;\n&#xD;\n</separator>
                           <encoding>UTF-8</encoding>
                        </merge>
                     </merges>
                  </configuration>
               </execution>
            </executions>
         </plugin>
         <!-- Plugin to run arbitrary Oracle sql statements.  Has limited
              error checking capabilities which is why I use sqlplus
              to compile and execute the final deployment script.  -->
         <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>sql-maven-plugin</artifactId>
            <version>1.5</version>
            <dependencies>
               <dependency>
                  <groupId>com.oracle</groupId>
                  <artifactId>ojdbc7</artifactId>
                  <version>12.1.1</version>
               </dependency>
            </dependencies>
            <configuration>
               <driver>oracle.jdbc.driver.OracleDriver</driver>
               <url>jdbc:oracle:thin:@${dz.jdbc}</url>
               <username>${dz.username}</username>
               <password>${dz.password}</password>
               <delimiter>/</delimiter>
               <delimiterType>row</delimiterType>
            </configuration>
            <executions>
               <!-- Step B.3
                    Run cleanup on scratch schema removing any preexisting module code. -->
               <execution>
                  <id>testing_setup</id>
                  <phase>generate-sources</phase>
                  <goals>
                     <goal>execute</goal>
                  </goals>
                  <configuration>
                     <sqlCommand>
DECLARE
   PROCEDURE dp(
      p_sql IN VARCHAR2
   )
   AS
   BEGIN
      EXECUTE IMMEDIATE p_sql;
   EXCEPTION
      WHEN OTHERS
      THEN
         IF SQLCODE = -04043
         THEN
            NULL;
         ELSE
            RAISE;
         END IF;
   END dp;
BEGIN
   dp('DROP PACKAGE DZ_SDOTXT_TEST');
   dp('DROP PACKAGE DZ_SDOTXT_MAIN');
   dp('DROP PACKAGE DZ_SDOTXT_UTIL');
   dp('DROP TYPE DZ_SDOTXT_LABELED_LIST FORCE');
   dp('DROP TYPE DZ_SDOTXT_LABELED FORCE');
END;
/
                     </sqlCommand>
                  </configuration>
               </execution>
            </executions>
         </plugin>
         <!-- Exec plugin to run system executables such
              as sqlplus, NaturalDocs and wkhtml2pdf -->
         <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>1.2.1</version>
            <executions>
               <!-- Step A.2
                    Correct any file permissions issues related to checkout.   -->
               <execution>
                  <id>chmod_test_package</id>
                  <phase>initialize</phase>
                  <goals>
                     <goal>exec</goal>
                  </goals>
                  <configuration>
                     <executable>chmod</executable>
                     <arguments>
                        <argument>755</argument>
                        <argument>tfs/Packages/DZ_SDOTXT_TEST.pks</argument>
                     </arguments>
                  </configuration>
               </execution>
               <!-- Step E.7
                    Execute the deployment sql file in the test schema.  -->
               <execution>
                  <id>load_deployment</id>
                  <phase>compile</phase>
                  <goals>
                     <goal>exec</goal>
                  </goals>
                  <configuration>
                     <executable>/home/oracle/u02/app/oracle/product/fmw12cr3/bin/sqlplus</executable>
                     <environmentVariables>
                        <ORACLE_HOME>/home/oracle/u02/app/oracle/product/fmw12cr3/</ORACLE_HOME>
                        <PATH>$PATH:$ORACLE_HOME/bin:$JAVA_HOME/bin</PATH>
                        <LD_LIBRARY_PATH>$LD_LIBRARY_PATH:$ORACLE_HOME/lib</LD_LIBRARY_PATH>
                        <PATH>$PATH:$ORACLE_HOME/bin</PATH>
                     </environmentVariables>
                     <arguments>
                        <argument>${dz.username}/${dz.password}@${dz.hoststring}</argument>
                        <argument>@dz_sdotxt_deploy.sql</argument>
                     </arguments>
                  </configuration>
               </execution>
               <!-- Step E.8
                    Run shell script to generate Natural Docs PDF documentation.  -->
               <execution>
                  <id>build_docs</id>
                  <phase>compile</phase>
                  <goals>
                     <goal>exec</goal>
                  </goals>
                  <configuration>
                     <executable>ndocs/processor.ksh</executable>
                     <arguments>
                        <argument>sdotxt</argument>
                     </arguments>
                  </configuration>
               </execution>
            </executions>
         </plugin>
      </plugins>
   </build>
</project>

